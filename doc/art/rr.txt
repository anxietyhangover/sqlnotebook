/*
http://www.bottlecaps.de/rr/ui 
[ ] Show EBNF
#FFFFFF Color
    0 º Hue
    0 % Saturation
  100 % Lightness
  825 px Graphics width
[X] Direct recursion elimination
[X] Factoring
[X] Inline literals
*/

doc-declare-stmt ::= 'DECLARE' ('PARAMETER')? variable-name ('=' initial-value)?

doc-set-stmt ::= 'SET' variable-name '=' new-value

doc-if-stmt ::= 'IF' condition (stmt-if-true | ('BEGIN' stmt-if-true* 'END')) ('ELSE' (stmt-if-false | ('BEGIN' stmt-if-false* 'END')))?

doc-while-stmt ::= 'WHILE' condition (stmt | ('BEGIN' stmt* 'END'))

doc-break-stmt ::= 'BREAK'

doc-continue-stmt ::= 'CONTINUE'

doc-print-stmt ::= 'PRINT' expression

doc-execute-stmt ::= ('EXEC' | 'EXECUTE') (result-variable "=")? script-name (parameter-name "=" (argument-value | "DEFAULT") (',' parameter-name "=" (argument-value | "DEFAULT"))* )?

doc-return-stmt ::= 'RETURN' (return-value)?

doc-throw-stmt ::= 'THROW' (error-message)?

doc-try-stmt ::= 'BEGIN' 'TRY' (stmt-to-try)* 'END' 'TRY' 'BEGIN' 'CATCH' (stmt-if-error)* 'END' 'CATCH'

doc-for-stmt ::= 'FOR' variable-name '=' first-number 'TO' last-number ('STEP' step)? (stmt | ('BEGIN' stmt* 'END'))

doc-for-each-stmt ::= 'FOR' 'EACH' variable-name (',' variable-name)* 'IN' ('(' select-stmt ')' | table-name) (stmt | ('BEGIN' stmt* 'END'))


import-xls-stmt ::= 'IMPORT' ('XLS' | 'XLSX') expr (xls-worksheet)+

xls-worksheet ::= 'WORKSHEET' expr 'INTO' import-table ('OPTIONS' options-list)?

import-csv-stmt ::= 'IMPORT' 'CSV' expr 'INTO' import-table
    ('OPTIONS' options-list)?

import-table ::= table-name
    (
        '('
        import-column (',' import-column)*
        ')'
    )?

import-column ::= column-name
    ('AS' column-name)?
    ('TEXT' | 'INTEGER' | 'REAL' | 'DATE' | 'DATETIME' | 'DATETIMEOFFSET')?

options-list ::= '(' identifier ':' expr ( ',' identifier ':' expr )* ')'

table-name ::= identifier | expr
column-name ::= identifier | expr

import-txt-stmt ::= 'IMPORT' ('TXT' | 'TEXT') expr 'INTO' table-name
    ('(' line-number-column-name ',' text-column-name ')')? ('OPTIONS' options-list)?

export-txt-stmt ::= 'EXPORT' ('TXT' | 'TEXT') expr 'FROM' '(' select-stmt ')' ('OPTIONS' options-list)?



/* these are produced by repeatedly inlining the non-terminals in the above definitions, 
and then manually simplifying them as desired */

doc-import-csv-stmt ::= 'IMPORT' 'CSV' filename 'INTO' (table-name
    (
        '('
        (column-name
    ('AS' target-column-name)?
    (data-type)?) (',' (column-name
    ('AS' target-column-name)?
    (data-type)?))*
        ')'
    )?)
    ('OPTIONS' ('(' key ':' value ( ',' key ':' value )* ')'))?


doc-import-txt-stmt ::= 'IMPORT' ('TXT' | 'TEXT') filename 'INTO' table-name ('(' line-number-column-name ',' text-column-name ')')? ('OPTIONS' ('(' key ':' value ( ',' key ':' value )* ')'))?

doc-export-txt-stmt ::= 'EXPORT' ('TXT' | 'TEXT') filename 'FROM' '(' select-stmt ')' ('OPTIONS' ('(' key ':' value ( ',' key ':' value )* ')'))?


doc-import-xls-stmt ::= 'IMPORT' ('XLS' | 'XLSX') filename ('WORKSHEET' which-sheet)? 'INTO' (table-name ( '(' (column-name
    ('AS' target-column-name)?
    (data-type)?) (',' (column-name
    ('AS' target-column-name)?
    (data-type)?))* ')' )?) ('OPTIONS' ('(' key ':' value ( ',' key ':' value )* ')'))?




