# SQL Notebook
# Copyright (C) 2018 Brian Luft
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
# Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
# OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
# OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

project(
    'sqlnotebook',
    ['c', 'vala'])

gnome = import('gnome')

gio_dep = dependency('gio-2.0')
glib_dep = dependency('glib-2.0')
gobject_dep = dependency('gobject-2.0')
gmodule_dep = dependency('gmodule-2.0')
gtk_dep = dependency('gtk+-3.0')
gee_dep = dependency('gee-0.8')
z_dep = meson.get_compiler('c').find_library('z', required: true)
linux_dl_dep = meson.get_compiler('c').find_library('dl', required: false)
threads_dep = dependency('threads')
m_dep = meson.get_compiler('c').find_library('m', required: false)
posix_dep = meson.get_compiler('vala').find_library('posix')

jansson_vapi = meson.get_compiler('vala').find_library(
    'jansson',
    dirs: join_paths(meson.current_source_dir(), 'ext/vapi'))
jansson_dep = meson.get_compiler('c').find_library('jansson', required: true)

# windows-only deps
windows_ws2_32_dep = meson.get_compiler('c').find_library('ws2_32', required: false)
windows_dnsapi_dep = meson.get_compiler('c').find_library('dnsapi', required: false)
windows_iphlpapi_dep = meson.get_compiler('c').find_library('iphlpapi', required: false)

add_global_arguments('--enable-checking', language: 'vala')
add_global_arguments('--target-glib=2.55', language: 'vala')

#
# libsqlite3 (static library)
#

libsqlite3_deps = [
    linux_dl_dep,
    m_dep,
    threads_dep
]

libsqlite3_sources = [ <sources-libsqlite3> ]

libsqlite3_a = static_library(
    'sqlite3',
    libsqlite3_sources,
    dependencies: libsqlite3_deps)

libsqlite3_vapi = meson.get_compiler('vala').find_library(
    'sqlite3',
    dirs: join_paths(meson.current_source_dir(), 'ext/vapi'))

libsqlite3_tokenizer_vapi = meson.get_compiler('vala').find_library(
    'sqlite3_tokenizer',
    dirs: join_paths(meson.current_source_dir(), 'src/libsqlite3'))

libsqlite3_dep = declare_dependency(
    dependencies: [libsqlite3_vapi, libsqlite3_tokenizer_vapi],
    link_with: libsqlite3_a,
    include_directories: include_directories('src/libsqlite3'))

#
# libsqlnotebook (shared library)
#

nativeutil_dep = meson.get_compiler('vala').find_library(
    'NativeUtil',
    dirs: join_paths(meson.current_source_dir(), 'src/libsqlnotebook/Utils'))

libsqlnotebook_deps = [
    gio_dep,
    glib_dep,
    gobject_dep,
    gmodule_dep,
    gee_dep,
    z_dep,
    windows_ws2_32_dep,
    windows_dnsapi_dep,
    windows_iphlpapi_dep,
    threads_dep,
    posix_dep,
    libsqlite3_dep,
    nativeutil_dep,
    jansson_vapi,
    jansson_dep
]

libsqlnotebook_sources = [ <sources-libsqlnotebook> ]

libsqlnotebook_link_args = []
libsqlnotebook_c_args = []

if host_machine.system() == 'windows'
    libsqlnotebook_link_args += '-Wl,--export-all-symbols'
    libsqlnotebook_c_args += '-municode'
endif

if host_machine.system() == 'darwin'
    libsqlnotebook_link_args += '-L/usr/x86_64-apple-darwin14/lib/'
endif

libsqlnotebook_so = shared_library(
    'sqlnotebook',
    libsqlnotebook_sources,
    dependencies: libsqlnotebook_deps,
    link_args: libsqlnotebook_link_args,
    c_args: libsqlnotebook_c_args)

libsqlnotebook_dep = declare_dependency(
    link_with: libsqlnotebook_so,
    include_directories: include_directories('.'))

#
# sqlnotebook (executable)
#

sqlnotebook_deps = [
    gio_dep,
    glib_dep,
    gobject_dep,
    gmodule_dep,
    gee_dep,
    z_dep,
    windows_ws2_32_dep,
    windows_dnsapi_dep,
    windows_iphlpapi_dep,
    libsqlnotebook_dep
]

sqlnotebook_sources = [ <sources-sqlnotebook> ]

sqlnotebook_c_args = []

if host_machine.system() == 'windows'
    sqlnotebook_c_args += '-municode'
endif

executable(
    'sqlnotebook',
    sqlnotebook_sources,
    dependencies: sqlnotebook_deps,
    c_args: sqlnotebook_c_args)

#
# sqlnotebook-gui (executable)
#

gui_resources_src = gnome.compile_resources(
    'resources',
    'src/sqlnotebook-gui/resources/gresource.xml',
    source_dir: ['src/sqlnotebook-gui/resources/']
)

sqlnotebookgui_deps = [
    gio_dep,
    glib_dep,
    gobject_dep,
    gmodule_dep,
    gee_dep,
    z_dep,
    windows_ws2_32_dep,
    windows_dnsapi_dep,
    windows_iphlpapi_dep,
    gtk_dep,
    libsqlnotebook_dep
]

sqlnotebookgui_sources = [ <sources-sqlnotebook-gui>, gui_resources_src ]

sqlnotebookgui_c_args = []

if host_machine.system() == 'windows'
    sqlnotebookgui_c_args += '-municode'
endif

executable(
    'sqlnotebook-gui',
    sqlnotebookgui_sources,
    dependencies: sqlnotebookgui_deps,
    gui_app: true,
    vala_args: '--gresources=../src/sqlnotebook-gui/resources/gresource.xml',
    c_args: sqlnotebookgui_c_args)

#
# tests (executable)
#

tests_deps = [
    gio_dep,
    glib_dep,
    gobject_dep,
    gmodule_dep,
    gee_dep,
    z_dep,
    windows_ws2_32_dep,
    windows_dnsapi_dep,
    windows_iphlpapi_dep,
    libsqlnotebook_dep
]

tests_sources = [ <sources-tests> ]

tests_c_args = []

if host_machine.system() == 'windows'
    tests_c_args += '-municode'
endif

executable(
    'tests',
    tests_sources,
    dependencies: tests_deps,
    c_args: tests_c_args)
